#!/usr/bin/env node
/* vim: set ft=javascript: */

/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * Copyright 2020 Joyent, Inc.
 */

var mod_assert = require('assert-plus');
var mod_bunyan = require('bunyan');
var mod_cmdln = require('cmdln');
var mod_fs = require('fs');
var mod_jsprim = require('jsprim');
var mod_lstream = require('lstream');
var mod_path = require('path');
var mod_tab = require('tab');
var mod_util = require('util');
var mod_vasync = require('vasync');
var mod_verror = require('verror');

var constants = require('../lib/constants');
var mod_storinfo = require('../lib/storinfo');

var MultiError = require('verror').MultiError;
var sprintf = mod_util.format;
var VError = mod_verror.VError;

///-- Globals

var NAME = 'mstorinfo';
var LOG = mod_bunyan.createLogger({
    name: NAME,
    level: process.LOG_LEVEL || 'error',
    stream: process.stderr
});

/*
 * Common options for all submcommands.
 */
var commonOptions = [
    {
        names: ['help', 'h'],
        type: 'bool',
        help: 'Show this help'
    }
];


/*
 * Creates an instance of the MStorinfo object.
 */
function MStorinfo() {
    mod_cmdln.Cmdln.call(this, {
        name: 'mstorinfo',
        desc: 'Models the behavior of the manta-storinfo component.',
        options: [
            {
                names: ['help', 'h'],
                type: 'bool',
                help: 'Show this help message and exit.'
            },
            {
                names: ['version'],
                type: 'bool',
                help: 'Print version and exit.'
            },
            {
                names: ['completion'],
                type: 'bool',
                help: 'Print bash completion code for this command and exit.',
                hidden: true
            }
        ],
        helpOpts: {
            includeEnv: true
        }
    });

    this.arg0 = NAME;
}
mod_util.inherits(MStorinfo, mod_cmdln.Cmdln);

/*
 * Print an error message, then a help message, then exit.
 */
MStorinfo.prototype.usage = function usage(message, subcmd, cb) {
    mod_assert.string(message, 'message');
    mod_assert.string(subcmd, 'subcmd');

    var self = this;

    console.error('%s: %s', self.arg0, message);
    console.error(self.helpFromSubcmd(subcmd));
    process.exit(2);
};


/*
 * Checks whether the "help" option was specified.  If so, print the usage
 * message and exit.
 */
MStorinfo.prototype.checkHelpRequested = function (subcmd, opts, cb) {
    var self = this;

    if (opts.help) {
        self.do_help('help', {}, [subcmd], cb);
        process.exit(0);
    }
};


/*
 * "Polls" a Moray for storage information and prints a summary to stdout.
 * Optionally, you may provide an interval for which the Storinfo will poll and a
 * count of polls to complete.
 *
 * Polling requires instantiating a Storinfo with a valid Moray client, which
 * requires some configuration from the user.  This command expects the Muskie
 * configuration format.  By default, we assume the configuration is located at
 * /opt/smartdc/muskie/etc/config.json, which is where the configuration is
 * located in a deployed webapi zone.
 */
MStorinfo.prototype.do_poll = function do_poll(subcmd, opts, args, cb) {
    var self = this;
    var interval, count, cfg, p_opts, iteration;

    self.checkHelpRequested(subcmd, opts, cb);

    if (args[0]) {
        interval = mod_jsprim.parseInteger(args[0]);
        if (typeof (interval) !== 'number') {
            self.usage('invalid interval: "' + args[0] + '"', subcmd, cb);
        }

        if (args[1]) {
            count = mod_jsprim.parseInteger(args[1]);
            if (typeof (count) !== 'number' || count < 1) {
                self.usage('invalid count: "' + args[1] + '"', subcmd, cb);
            }
        }
    }

    if (args.length > 2) {
        self.usage('unexpected arguments: ' + args.slice(2), subcmd, cb);
    }

    var data;
    try {
        data = mod_fs.readFileSync(opts.config, 'utf8');
        cfg = JSON.parse(data);
    } catch (e) {
        cb(new VError('Unable to load %s: %s', opts.config, e.message));
        return;
    }

    // Basic validation of the Storinfo config file.
    var reqd_props = [
        "lag",
        "moray",
        "multiDC"
    ];
    for (const prop of reqd_props) {
        if (!cfg.hasOwnProperty(prop)) {
            cb(new VError('Required config prop ' + prop + ' not found'));
            return;
        }
    }

    if (opts.percentage && opts.percentage > 100) {
        cb(new VError('percentage should not be greater than 100 percent'));
        return;
    }

    p_opts = {
        log: LOG,
        defaultMaxStreamingSizeMB: cfg.defaultMaxStreamingSizeMB ||
            constants.DEF_MAX_STREAMING_SIZE_MB,
        maxUtilizationPct: opts.percentage || cfg.maxUtilizationPct ||
            constants.DEF_MAX_PERCENT_UTIL,
        maxOperatorUtilizationPct: cfg.maxOperatorUtilizationPct ||
            constants.DEF_MAX_OPERATOR_PERCENT_UTIL,
        multiDC: cfg.multiDC,
        moray: cfg.moray,
        lag: cfg.lag
    };
    if (cfg.testMorayData !== undefined) {
        p_opts.testMorayData = cfg.testMorayData;
    }

    if (interval) {
        p_opts.storageInterval = interval * 1000;
    }
    var p = mod_storinfo.createClient(p_opts);

    function printTabularSummary(sharks) {
        var summary, columns, rows;

        summary = [];
        summary.push('polling options:');
        summary.push(' max percentage utilization: ' +
            p_opts.maxUtilizationPct);
        summary.push('');

        var dc_label = 'DATACENTER';
        var msi_label = 'MANTA_STORAGE_ID';
        var pu_label = '%USED';
        var amb_label = 'AVAIL_MB';
        var time_label = 'TIMESTAMP';

        columns = [
            {
                label: dc_label,
                width: 10
            }, {
                label: msi_label,
                width: 25
            }, {
                label: pu_label,
                width: 13
            }, {
                label: amb_label,
                width: 13
            }, {
                label: time_label,
                width: 30
            }
        ];

        rows = [];
        sharks.forEach(function (s) {
            var obj = {};

            obj[dc_label] = s.datacenter;
            obj[msi_label] = s.manta_storage_id;
            obj[pu_label] = s.percentUsed;
            obj[amb_label] = s.availableMB;
            obj[time_label] = new Date(s.timestamp).toISOString();
            rows.push(obj);
        });

        if (!opts.header) {
            console.log(summary.join('\n'));
        }


        mod_tab.emitTable({
            columns: columns,
            rows: rows,
            omitHeader: opts.omitHeader
        });
    }

    function printJSONSummary(sharks) {
            var obj = {};

            sharks.forEach(function (s) {
                var dc = s.datacenter;

                if (obj[dc] === undefined) {
                    obj[dc] = [];
                }
                obj[dc].push({
                    manta_storage_id: s.manta_storage_id,
                    availableMB: s.availableMB,
                    timestamp: s.timestamp,
                    percentUsed: s.percentUsed
                });
            });
            console.log(JSON.stringify(obj, null, 4));
    }

    /*
     * The Storinfo emits a 'topology' event every time it receives a response
     * from its polling, so we can listen for this to see the poll response.
     */
    iteration = 0;
    p.on('topology', function onTopology(sharkMaps) {
        var db = opts.operator ? sharkMaps[1] : sharkMaps[0];

        if (opts.all) {
            console.log(JSON.stringify(db, null, 4));
        } else if (opts.json) {
            printJSONSummary(db);
        } else {
            printTabularSummary(db);
        }

        if (!interval || (count === ++iteration)) {
            p.close();
            cb();
        }
    });
};

MStorinfo.prototype.do_poll.options = commonOptions.concat([
    {
        group: 'mstorinfo poll options'
    },
    {
        names: ['config', 'c'],
        type: 'string',
        help: 'Storinfo configuration file',
        default: '/opt/smartdc/storinfo/etc/config.json',
        helpArg: 'FILE',
        completionType: 'file'
    },
    {
        names: ['percentage', 'p'],
        type: 'positiveInteger',
        help: 'Poll with custom utilization percentage maximum (overrides ' +
            'config/default values)',
        helpArg: 'PERCENTAGE'
    },
    {
        names: ['all', 'a'],
        type: 'bool',
        default: false,
        help: 'Print all information available in storage records in JSON'
    },
    {
        names: ['json', 'j'],
        type: 'bool',
        default: false,
        help: 'Print storage record summary in JSON'
    },
    {
        names: [ 'omitHeader', 'H' ],
        type: 'bool',
        help: 'Omit summary and header row from tabular output',
        default: false
    },
    {
        names: [ 'operator', 'o' ],
        type: 'bool',
        help: 'Display information based on operator utilization threshold',
        default: false
    }
]);


MStorinfo.prototype.do_poll.help = [
    'Poll Moray for storage records and summarizes the results.',
    '',
    'Usage:',
    '    mstorinfo poll [OPTIONS] [INTERVAL [COUNT]]',
    '',
    '{{options}}',
    '',
    'The `poll` subcommand will request storage information from a particular',
    'Moray and summarize storage information in a tabular format.',
    '',
    'Optionally, you may provide a polling interval and a count of polls to',
    'complete.  For example, this would poll Moray every 10 seconds for 3',
    'intervals:',
    '   mstorinfo poll 10 3',
    '',
    'The `poll` subcommand expects a configuration file matching the format',
    'of Muskie\'s configuration file.  In particular, the following objects',
    'are required:',
    '   "storage": an object with the following fields:',
    '       "moray": a Moray configuration object',
    '       "lag": allowable grace period on storage records in ms (optional)',
    '',
    'You may override the maximum percent utilization field in the ',
    'configuration file using the `-p` flag.  For example, if you wanted to ',
    'see storage information for all storage nodes, regardless of how close ',
    'to capacity they are, you could poll with a max percentage utilization ',
    'of 100:',
    '   mstorinfo poll -p 100',
    '',
    'You may also print the `poll` output in JSON format with the -j flag',
    '   mstorinfo poll -j',
    ''
].join('\n');



//--- Mainline

var cli = new MStorinfo();
cli.showErrStack = false;
mod_cmdln.main(cli);
